#!/usr/bin/env python3

"""
Copyright 2023 Haoguang Yang

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

_summary_ This script automatically extracts CAN IDs from a DBC file and
generates a C++ header for inclusion in related sources.
"""

import sys

header_start = """
 * THIS FILE IS AUTOMATICALLY GENERATED. ANY DIRECT MODIFICATION TO THIS FILE IS
 * STRONGLY DISCOURAGED. YOUR CHANGES TO THIS FILE MAY BE LOST UPON RE-GENERATION.
 */

#ifndef RAPTOR_DBW_CAN__CANID_ENUM_HPP_
#define RAPTOR_DBW_CAN__CANID_ENUM_HPP_

#include <stdint.h>

namespace raptor_dbw_can
{
#undef BUILD_ASSERT

/** \\brief Enumeration of CAN message IDs */
enum class MessageID : uint32_t
{

"""

header_end = """
};

}       // namespace raptor_dbw_can

#endif  // RAPTOR_DBW_CAN__CANID_ENUM_HPP_

"""


def generate_c_canid_enum_header(dbcfile: str, enum_header_file: str):
    with open(dbcfile, 'r') as f:
        lines = f.readlines()
        f.close()
    can_ids = dict()
    for line in lines:
        if not line.startswith('BO_ '):
            continue
        # we have found a canid entry
        terms = line.split(' ')
        
        # For some use cases, ignore extreme large values that fall beyond the scope.
        # if (int(terms[1]) > 0x7FFFFFFF):
        #    continue
        
        # convert from decimal to hex, use upper-case letters, and remove '0x'
        canid_hex = hex(int(terms[1])).upper()[2:]
        # remove colon at the end
        canid_label = terms[2][:-1]
        can_ids.update({canid_label: canid_hex})
    with open(enum_header_file, 'w') as f:
        f.writelines([
            "/* Enumeration of CAN IDs as provided in the CAN DBC file:\n",
            " * " + dbcfile + "\n",
            " *\n",
            " * To re-generate this file, run from the package directory:\n",
            " * python ./scripts/dbc_to_c_canid_enum.py " + dbcfile + " " +
            enum_header_file + "\n",
            " *",
            header_start
        ])
        # sort using can_id
        sorted_dict_items = sorted(can_ids.items(), key=lambda x: int(x[1], 16))
        for key, value in sorted_dict_items:
            f.write(key.upper() + ' = 0x' + value + ',\n')
        f.write(header_end)
        f.close()


if __name__ == "__main__":
    generate_c_canid_enum_header(sys.argv[1], sys.argv[2])
